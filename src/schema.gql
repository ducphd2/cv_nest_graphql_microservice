# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type EducationCertification {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  time: String!
  major: String!
  isDeleted: Boolean!
  cv: Cv!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type WorkExperience {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  time: String!
  company: String!
  job_title: String!
  job_description: String!
  isDeleted: Boolean!
  cv: Cv!
  experienceProjects: [ExperienceProject!]!
}

type ExperienceProject {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  time: String!
  project_description: String!
  role: String!
  responsibilities: String!
  programming_languages: String!
  isDeleted: Boolean!
  cv: Cv!
  workExperience: WorkExperience!
}

type Cv {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  gender: String!
  nationality: String!
  objective: String!
  summary: String!
  isDeleted: Boolean!
  user: User!
  educationCertifications: [EducationCertification!]!
  experienceProjects: [ExperienceProject!]!
  workExperiences: [WorkExperience!]!
}

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  age: Int!
  role: UserRole!
  cvs: [Cv!]!
}

enum UserRole {
  ADMIN
  USER
}

type LoginMutationResponse {
  user: User!
  token: String!
}

type Query {
  getCv(cv_id: Float!): Cv!
  getCvs(paginationInput: PaginationInput!, q: QueryCvsInput!): [Cv!]!
  me: User!
}

input PaginationInput {
  take: Int = 3
  skip: Int = 0
}

input QueryCvsInput {
  name: String
  age: Int
  company: String
  programming_languages: String
}

type Mutation {
  createCv(createCvInput: CreateCvInput!): Cv!
  register(registerInput: RegisterDto!): LoginMutationResponse!
  login(loginInput: LoginDto!): LoginMutationResponse!
  updateUsername(infoUserInput: InfoUserInput!): User!
  createEducationCertification(createECInput: CreateEducationCertificationInput!, cv_id: Float!): EducationCertification!
  createWorkExperience(createWEInput: CreateWorkExperienceInput!, cv_id: Float!): WorkExperience!
  createExperienceProject(createEPInput: CreateExperienceProjectInput!, cv_id: Float!, work_experience_id: Float!): ExperienceProject!
}

input CreateCvInput {
  name: String!
  nationality: String!
  gender: String!
  objective: String
  summary: String
  education_certifications: [CreateEducationCertificationInput!]
  workExperiences: [CreateWorkExperienceInput!]
  experienceProjects: [CreateExperienceProjectInput!]
}

input CreateEducationCertificationInput {
  name: String!
  time: String!
  major: String
}

input CreateWorkExperienceInput {
  job_title: String!
  job_description: String!
  time: String!
  company: String
}

input CreateExperienceProjectInput {
  name: String!
  time: String!
  project_description: String!
  role: String!
  responsibilities: String!
  programming_languages: String!
  workExperience: CreateWorkExperienceInput
}

input RegisterDto {
  email: String!
  password: String!
  confirm_password: String!
}

input LoginDto {
  email: String!
  password: String!
}

input InfoUserInput {
  username: String!
  age: Int!
}
